{"version":3,"sources":["Context.js","components/BadgeIcon/index.js","components/SearchBox/index.js","components/Navigation/index.js","views/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["API_URI","AppContext","React","createContext","Context","state","findedJobs","lastJobSelected","show","findJobs","_callee","query","_ref2","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","axios","get","concat","sent","data","_this","setState","stop","this","findJob","_callee2","id","_ref4","_context2","console","log","value","context","react_default","createElement","Provider","props","children","Component","BadgeIcon","_ref","_ref$count","count","iconName","className","SearchBox","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","originalWidth","onFocus","width","handleChange","e","onSearch","target","clickOption","option","searchList","map","job","key","uuid","onClick","suggestion","placeholderText","debounce","bind","assertThisInitialized","style","type","placeholder","onChange","display","contextType","Navigation","setWrapperRef","node","wrapperRef","handleClickOutside","event","contains","document","addEventListener","removeEventListener","ref","components_SearchBox","components_BadgeIcon","Dashboard","react","components_Navigation","JSON","stringify","App","src_Context","views_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f156a99.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Creating React's contex\nconst API_URI = 'https://api.dataatwork.org/v1';\nexport const AppContext = React.createContext();\n\nclass Context extends Component {\n  state = {\n    findedJobs: [],\n    lastJobSelected: {},\n    show: false,\n  };\n\n  findJobs = async (query = '') => {\n    const { data: findedJobs } = await axios.get(`${API_URI}/jobs/autocomplete?contains=${query}`);\n    this.setState({ findedJobs });\n  };\n\n  findJob = async (id) => {\n    const { data: lastJobSelected } = await axios.get(`${API_URI}/jobs/${id}`);\n    console.log('SelectedJob =>', lastJobSelected);\n    this.setState({ lastJobSelected });\n  };\n\n  show = (value) => this.setState({ show: value });\n\n  render () {\n    const context = {\n      state: this.state,\n      findJobs: this.findJobs,\n      findJob: this.findJob,\n      show: this.show,\n    };\n\n    return (<AppContext.Provider value={context}>\n      {this.props.children}\n    </AppContext.Provider>);\n  }\n}\n\nexport default Context;\n","import React from 'react';\n\nconst BadgeIcon = ({ count = 0, iconName }) => {\n  return (<button className=\"badge__icon\">\n    <i className={'fas fa-' + iconName}></i>\n    { count !== 0 ? \n      <span className=\"badge__counter\">{count}</span> \n    : null }\n  </button>);\n}\n\nexport default BadgeIcon;","import React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport { AppContext } from '../../Context';\n\nclass SearchBox extends Component {\n  static contextType = AppContext;\n\n  state = {\n    originalWidth: 0,\n  };\n\n  constructor (props) {\n    super(props);\n    this.width = props.width;\n    this.placeholderText = props.placeholderText;\n    this.onSearch = debounce(this.onSearch.bind(this), 500);\n  }\n\n  componentDidMount () {\n    this.setState({ originalWidth: this.width });\n  }\n\n  onFocus = () => {\n    this.setState({ originalWidth: this.width * 2 })\n    this.context.show(true);\n  };\n\n  // Handling change on input element\n  handleChange = (e) => {\n    this.onSearch(e.target.value)\n  }\n\n  // Method for send petition onSearch\n  onSearch = (query = '') => {\n    if (query.length > 0) {\n      this.context.findJobs(query);\n    }\n  };\n\n  clickOption = (e, option) => {\n    this.context.findJob(option);\n    this.context.show(false);\n  };\n\n  searchList = () => (\n    this.context.state.findedJobs.map((job) =>\n      <li key={job.uuid} onClick={(e) => this.clickOption(e, job.uuid)} className=\"search__item\">\n        {job.suggestion}\n      </li>)\n  );\n\n  render () {\n    return (<div className=\"search-box\">\n      <div className=\"search__wrapper bg-white flex\">\n        <input\n          style={{width: (this.context.state.show) ? this.state.originalWidth + 'px' : this.width + 'px' }}\n          className=\"search__input rounded p-2\"\n          type=\"text\"\n          placeholder={this.placeholderText}\n          onFocus={this.onFocus}\n          onChange={this.handleChange} />\n        <div className=\"w-auto flex justify-end items-center p-2\">\n          <i className=\"fas fa-search\"></i>\n        </div>\n      </div>\n      <div className=\"search__dropdown\" style={{ display: (this.context.state.show) ? 'block' : 'none' }}>\n        <nav className=\"search__nav\">\n          <ul className=\"search__list list-reset\">\n            {this.searchList()}\n          </ul>\n        </nav>\n      </div>\n    </div>);\n  }\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport BadgeIcon from '../BadgeIcon';\nimport SearchBox from '../SearchBox';\nimport { AppContext } from '../../Context';\n\nclass Navigation extends Component {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown',this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown',this.handleClickOutside);\n  }\n\n  setWrapperRef = (node) => {\n    this.wrapperRef = node;\n  };\n\n  handleClickOutside = (event) => {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.context.show(false);\n    }\n  };\n\n  render () {\n    return (<nav ref={this.setWrapperRef} className=\"navigation flex items-center justify-between flex-wrap\">\n      <div className=\"flex items-center flex-no-shrink\">\n        <span className=\"font-semibold tracking-normal text-white\">React Frontend Test</span>\n      </div>\n      <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n        <div className=\"flex-grow\"></div>\n        <div>\n          <ul className=\"list-reset flex items-center navigation__options\">\n            <li className=\"mr-4\">\n              <SearchBox placeholderText=\"Search...\" width={200}></SearchBox>\n            </li>\n            <li className=\"mr-4\">\n              <BadgeIcon count={10} iconName=\"bell\"></BadgeIcon>\n            </li>\n            <li className=\"mr-4\">\n              <BadgeIcon count={7} iconName=\"envelope\"></BadgeIcon>\n            </li>\n            <li className=\"mr-4\">\n              <BadgeIcon iconName=\"user\"></BadgeIcon>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>);\n  }\n}\n\nexport default Navigation;","import React, { Component, Fragment } from 'react';\nimport Navigation from '../../components//Navigation';\nimport { AppContext } from '../../Context';\n\nclass Dashboard extends Component {\n  static contextType = AppContext;\n\n  render () {\n    return (<Fragment>\n      <header className=\"header bg-blue-darkest\">\n        <div className=\"container mx-auto\">\n          <Navigation></Navigation>\n        </div>\n      </header>\n      <main className=\"main text-center py-6\">\n        <div className=\"container\">\n        <code>Selected Option: {JSON.stringify(this.context.state.lastJobSelected)}</code>\n        </div>\n      </main>\n    </Fragment>)\n  }\n}\n\nexport default Dashboard;","import React from 'react';\nimport Context from './Context';\nimport './App.scss';\nimport Dashboard from './views/Dashboard';\n\nconst App = () => {\n  return (<Context>\n    <Dashboard />\n  </Context>);\n};\n\nApp.contextType = Context;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}